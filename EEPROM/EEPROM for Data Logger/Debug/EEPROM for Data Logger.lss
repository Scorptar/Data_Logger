
EEPROM for Data Logger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000008bc  00000950  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  00800102  00800102  00000952  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000984  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bfd  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001012  00000000  00000000  000027e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000111f  00000000  00000000  000037fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000484  00000000  00000000  0000491c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000096b  00000000  00000000  00004da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c85  00000000  00000000  0000570b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00006390  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a3 c0       	rjmp	.+326    	; 0x148 <__ctors_end>
   2:	00 00       	nop
   4:	7d c3       	rjmp	.+1786   	; 0x700 <__vector_1>
   6:	00 00       	nop
   8:	bc c0       	rjmp	.+376    	; 0x182 <__bad_interrupt>
   a:	00 00       	nop
   c:	ba c0       	rjmp	.+372    	; 0x182 <__bad_interrupt>
   e:	00 00       	nop
  10:	b8 c0       	rjmp	.+368    	; 0x182 <__bad_interrupt>
  12:	00 00       	nop
  14:	b6 c0       	rjmp	.+364    	; 0x182 <__bad_interrupt>
  16:	00 00       	nop
  18:	e4 c3       	rjmp	.+1992   	; 0x7e2 <__vector_6>
  1a:	00 00       	nop
  1c:	b2 c0       	rjmp	.+356    	; 0x182 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b0 c0       	rjmp	.+352    	; 0x182 <__bad_interrupt>
  22:	00 00       	nop
  24:	ae c0       	rjmp	.+348    	; 0x182 <__bad_interrupt>
  26:	00 00       	nop
  28:	ac c0       	rjmp	.+344    	; 0x182 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	aa c0       	rjmp	.+340    	; 0x182 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a8 c0       	rjmp	.+336    	; 0x182 <__bad_interrupt>
  32:	00 00       	nop
  34:	a6 c0       	rjmp	.+332    	; 0x182 <__bad_interrupt>
  36:	00 00       	nop
  38:	a4 c0       	rjmp	.+328    	; 0x182 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a2 c0       	rjmp	.+324    	; 0x182 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a0 c0       	rjmp	.+320    	; 0x182 <__bad_interrupt>
  42:	00 00       	nop
  44:	9e c0       	rjmp	.+316    	; 0x182 <__bad_interrupt>
  46:	00 00       	nop
  48:	2e c3       	rjmp	.+1628   	; 0x6a6 <__vector_18>
  4a:	00 00       	nop
  4c:	9a c0       	rjmp	.+308    	; 0x182 <__bad_interrupt>
  4e:	00 00       	nop
  50:	66 c3       	rjmp	.+1740   	; 0x71e <__vector_20>
  52:	00 00       	nop
  54:	96 c0       	rjmp	.+300    	; 0x182 <__bad_interrupt>
  56:	00 00       	nop
  58:	94 c0       	rjmp	.+296    	; 0x182 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	92 c0       	rjmp	.+292    	; 0x182 <__bad_interrupt>
  5e:	00 00       	nop
  60:	90 c0       	rjmp	.+288    	; 0x182 <__bad_interrupt>
  62:	00 00       	nop
  64:	8e c0       	rjmp	.+284    	; 0x182 <__bad_interrupt>
  66:	00 00       	nop
  68:	c3 c0       	rjmp	.+390    	; 0x1f0 <__vector_26>
  6a:	00 00       	nop
  6c:	8a c0       	rjmp	.+276    	; 0x182 <__bad_interrupt>
  6e:	00 00       	nop
  70:	88 c0       	rjmp	.+272    	; 0x182 <__bad_interrupt>
  72:	00 00       	nop
  74:	86 c0       	rjmp	.+268    	; 0x182 <__bad_interrupt>
  76:	00 00       	nop
  78:	84 c0       	rjmp	.+264    	; 0x182 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	82 c0       	rjmp	.+260    	; 0x182 <__bad_interrupt>
  7e:	00 00       	nop
  80:	80 c0       	rjmp	.+256    	; 0x182 <__bad_interrupt>
  82:	00 00       	nop
  84:	7e c0       	rjmp	.+252    	; 0x182 <__bad_interrupt>
  86:	00 00       	nop
  88:	7c c0       	rjmp	.+248    	; 0x182 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	14 01       	movw	r2, r8
  8e:	66 01       	movw	r12, r12
  90:	66 01       	movw	r12, r12
  92:	66 01       	movw	r12, r12
  94:	66 01       	movw	r12, r12
  96:	66 01       	movw	r12, r12
  98:	66 01       	movw	r12, r12
  9a:	66 01       	movw	r12, r12
  9c:	14 01       	movw	r2, r8
  9e:	66 01       	movw	r12, r12
  a0:	66 01       	movw	r12, r12
  a2:	66 01       	movw	r12, r12
  a4:	66 01       	movw	r12, r12
  a6:	66 01       	movw	r12, r12
  a8:	66 01       	movw	r12, r12
  aa:	66 01       	movw	r12, r12
  ac:	16 01       	movw	r2, r12
  ae:	66 01       	movw	r12, r12
  b0:	66 01       	movw	r12, r12
  b2:	66 01       	movw	r12, r12
  b4:	66 01       	movw	r12, r12
  b6:	66 01       	movw	r12, r12
  b8:	66 01       	movw	r12, r12
  ba:	66 01       	movw	r12, r12
  bc:	66 01       	movw	r12, r12
  be:	66 01       	movw	r12, r12
  c0:	66 01       	movw	r12, r12
  c2:	66 01       	movw	r12, r12
  c4:	66 01       	movw	r12, r12
  c6:	66 01       	movw	r12, r12
  c8:	66 01       	movw	r12, r12
  ca:	66 01       	movw	r12, r12
  cc:	16 01       	movw	r2, r12
  ce:	66 01       	movw	r12, r12
  d0:	66 01       	movw	r12, r12
  d2:	66 01       	movw	r12, r12
  d4:	66 01       	movw	r12, r12
  d6:	66 01       	movw	r12, r12
  d8:	66 01       	movw	r12, r12
  da:	66 01       	movw	r12, r12
  dc:	66 01       	movw	r12, r12
  de:	66 01       	movw	r12, r12
  e0:	66 01       	movw	r12, r12
  e2:	66 01       	movw	r12, r12
  e4:	66 01       	movw	r12, r12
  e6:	66 01       	movw	r12, r12
  e8:	66 01       	movw	r12, r12
  ea:	66 01       	movw	r12, r12
  ec:	62 01       	movw	r12, r4
  ee:	66 01       	movw	r12, r12
  f0:	66 01       	movw	r12, r12
  f2:	66 01       	movw	r12, r12
  f4:	66 01       	movw	r12, r12
  f6:	66 01       	movw	r12, r12
  f8:	66 01       	movw	r12, r12
  fa:	66 01       	movw	r12, r12
  fc:	3f 01       	movw	r6, r30
  fe:	66 01       	movw	r12, r12
 100:	66 01       	movw	r12, r12
 102:	66 01       	movw	r12, r12
 104:	66 01       	movw	r12, r12
 106:	66 01       	movw	r12, r12
 108:	66 01       	movw	r12, r12
 10a:	66 01       	movw	r12, r12
 10c:	66 01       	movw	r12, r12
 10e:	66 01       	movw	r12, r12
 110:	66 01       	movw	r12, r12
 112:	66 01       	movw	r12, r12
 114:	66 01       	movw	r12, r12
 116:	66 01       	movw	r12, r12
 118:	66 01       	movw	r12, r12
 11a:	66 01       	movw	r12, r12
 11c:	33 01       	movw	r6, r6
 11e:	66 01       	movw	r12, r12
 120:	66 01       	movw	r12, r12
 122:	66 01       	movw	r12, r12
 124:	66 01       	movw	r12, r12
 126:	66 01       	movw	r12, r12
 128:	66 01       	movw	r12, r12
 12a:	66 01       	movw	r12, r12
 12c:	51 01       	movw	r10, r2

0000012e <Menu_State>:
 12e:	01 3b 01 00 00 00 00 00 00 00                       .;........

00000138 <menu_nextstate>:
 138:	00 00 00                                            ...

0000013b <Txt_ADC_DAC>:
 13b:	54 65 73 74 20 41 44 43 20 44 41 43 00              Test ADC DAC.

00000148 <__ctors_end>:
 148:	11 24       	eor	r1, r1
 14a:	1f be       	out	0x3f, r1	; 63
 14c:	cf ef       	ldi	r28, 0xFF	; 255
 14e:	d0 e4       	ldi	r29, 0x40	; 64
 150:	de bf       	out	0x3e, r29	; 62
 152:	cd bf       	out	0x3d, r28	; 61

00000154 <__do_copy_data>:
 154:	11 e0       	ldi	r17, 0x01	; 1
 156:	a0 e0       	ldi	r26, 0x00	; 0
 158:	b1 e0       	ldi	r27, 0x01	; 1
 15a:	ec eb       	ldi	r30, 0xBC	; 188
 15c:	f8 e0       	ldi	r31, 0x08	; 8
 15e:	00 e0       	ldi	r16, 0x00	; 0
 160:	0b bf       	out	0x3b, r16	; 59
 162:	02 c0       	rjmp	.+4      	; 0x168 <__do_copy_data+0x14>
 164:	07 90       	elpm	r0, Z+
 166:	0d 92       	st	X+, r0
 168:	a2 30       	cpi	r26, 0x02	; 2
 16a:	b1 07       	cpc	r27, r17
 16c:	d9 f7       	brne	.-10     	; 0x164 <__do_copy_data+0x10>

0000016e <__do_clear_bss>:
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	a2 e0       	ldi	r26, 0x02	; 2
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	01 c0       	rjmp	.+2      	; 0x178 <.do_clear_bss_start>

00000176 <.do_clear_bss_loop>:
 176:	1d 92       	st	X+, r1

00000178 <.do_clear_bss_start>:
 178:	aa 36       	cpi	r26, 0x6A	; 106
 17a:	b2 07       	cpc	r27, r18
 17c:	e1 f7       	brne	.-8      	; 0x176 <.do_clear_bss_loop>
 17e:	67 d1       	rcall	.+718    	; 0x44e <main>
 180:	9b c3       	rjmp	.+1846   	; 0x8b8 <_exit>

00000182 <__bad_interrupt>:
 182:	3e cf       	rjmp	.-388    	; 0x0 <__vectors>

00000184 <Init_Hardware>:

void Init_Hardware(void)
{
	/* Configuration I/O */
	//LED en PD7 en mode Output
  	SET_BIT(DDRD,DDD7);
 184:	57 9a       	sbi	0x0a, 7	; 10
	// LED OFF au démarrage
	//Led = FALSE;
	CLR_BIT(PORTD,PD7);
 186:	5f 98       	cbi	0x0b, 7	; 11
	// RELAIS en PD6 en mode Output
	SET_BIT(DDRD,DDD6);
 188:	56 9a       	sbi	0x0a, 6	; 10
	// Contacts RELAIS ouverts au démarrage
	Relais = FALSE;
 18a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Relais>
	CLR_BIT(PORTD,PD6);
 18e:	5e 98       	cbi	0x0b, 6	; 11
	// Bouton poussoir en PD2 en mode Input avec pull up
	CLR_BIT(DDRD,DDD2);
 190:	52 98       	cbi	0x0a, 2	; 10
	// Pull UP en PD2 enabled
	SET_BIT(PORTD,PD2);
 192:	5a 9a       	sbi	0x0b, 2	; 11
	// Contact secondaire relais en PA6 en mode Input avec pull up
	CLR_BIT(DDRA,DDA6);
 194:	0e 98       	cbi	0x01, 6	; 1
	// Pull UP en PD5 enabled
	SET_BIT(PORTA,PA6);
 196:	16 9a       	sbi	0x02, 6	; 2
	// Interruption externe via INT0 de la broche PD2 enabled
	SET_BIT(EIMSK,INT0);
 198:	e8 9a       	sbi	0x1d, 0	; 29
	// Interruption sur flanc descendant
	//(EICRA) ISC01 = 1 |ISC00 = 0
	SET_BIT(EICRA,ISC01);
 19a:	e9 e6       	ldi	r30, 0x69	; 105
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	82 60       	ori	r24, 0x02	; 2
 1a2:	80 83       	st	Z, r24
	CLR_BIT(EICRA,ISC00);
 1a4:	80 81       	ld	r24, Z
 1a6:	8e 7f       	andi	r24, 0xFE	; 254
 1a8:	80 83       	st	Z, r24
	
	// Configuration clavier 5 touches
	// TOUCHES UP (PC1),DOWN (PC4), LEFT (PC5), RIGHT (PC2), ENTER (PC3)
	//Input Mode
	CLR_BIT(DDRC,DDC1);
 1aa:	39 98       	cbi	0x07, 1	; 7
	CLR_BIT(DDRC,DDC2);
 1ac:	3a 98       	cbi	0x07, 2	; 7
	CLR_BIT(DDRC,DDC3);
 1ae:	3b 98       	cbi	0x07, 3	; 7
	CLR_BIT(DDRC,DDC4);
 1b0:	3c 98       	cbi	0x07, 4	; 7
	CLR_BIT(DDRC,DDC5);
 1b2:	3d 98       	cbi	0x07, 5	; 7
	//enable pull up
	SET_BIT(PORTC,PC1);
 1b4:	41 9a       	sbi	0x08, 1	; 8
	SET_BIT(PORTC,PC2);
 1b6:	42 9a       	sbi	0x08, 2	; 8
	SET_BIT(PORTC,PC3);
 1b8:	43 9a       	sbi	0x08, 3	; 8
	SET_BIT(PORTC,PC4);
 1ba:	44 9a       	sbi	0x08, 4	; 8
	SET_BIT(PORTC,PC5);
 1bc:	45 9a       	sbi	0x08, 5	; 8
	// enable int
	SET_BIT(PCICR,PCIE2);
 1be:	e8 e6       	ldi	r30, 0x68	; 104
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	84 60       	ori	r24, 0x04	; 4
 1c6:	80 83       	st	Z, r24
	// enable mask
	SET_BIT(PCMSK2,PCINT17);  // UP
 1c8:	ed e6       	ldi	r30, 0x6D	; 109
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	80 83       	st	Z, r24
	SET_BIT(PCMSK2,PCINT18); // RIGHT
 1d2:	80 81       	ld	r24, Z
 1d4:	84 60       	ori	r24, 0x04	; 4
 1d6:	80 83       	st	Z, r24
	SET_BIT(PCMSK2,PCINT19); // ENTER
 1d8:	80 81       	ld	r24, Z
 1da:	88 60       	ori	r24, 0x08	; 8
 1dc:	80 83       	st	Z, r24
	SET_BIT(PCMSK2,PCINT20); // DOWN
 1de:	80 81       	ld	r24, Z
 1e0:	80 61       	ori	r24, 0x10	; 16
 1e2:	80 83       	st	Z, r24
	SET_BIT(PCMSK2,PCINT21); // LEFT
 1e4:	80 81       	ld	r24, Z
 1e6:	80 62       	ori	r24, 0x20	; 32
 1e8:	80 83       	st	Z, r24
	
		
	// FOR DEBUG OSCILLO
	// PA7 pour COM
	SET_BIT(DDRA,DDA7);
 1ea:	0f 9a       	sbi	0x01, 7	; 1
	CLR_BIT(PORTA, PORTA7);
 1ec:	17 98       	cbi	0x02, 7	; 2
 1ee:	08 95       	ret

000001f0 <__vector_26>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	0b b6       	in	r0, 0x3b	; 59
 1fc:	0f 92       	push	r0
 1fe:	2f 93       	push	r18
 200:	3f 93       	push	r19
 202:	8f 93       	push	r24
 204:	9f 93       	push	r25
 206:	af 93       	push	r26
 208:	bf 93       	push	r27
 20a:	ef 93       	push	r30
 20c:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
 20e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 212:	8e 2f       	mov	r24, r30
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	fc 01       	movw	r30, r24
 218:	38 97       	sbiw	r30, 0x08	; 8
 21a:	e1 35       	cpi	r30, 0x51	; 81
 21c:	f1 05       	cpc	r31, r1
 21e:	08 f0       	brcs	.+2      	; 0x222 <__vector_26+0x32>
 220:	55 c0       	rjmp	.+170    	; 0x2cc <__vector_26+0xdc>
 222:	ea 5b       	subi	r30, 0xBA	; 186
 224:	ff 4f       	sbci	r31, 0xFF	; 255
 226:	38 c3       	rjmp	.+1648   	; 0x898 <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 228:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
    case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
 22c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 230:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TWI_msgSize>
 234:	e8 17       	cp	r30, r24
 236:	70 f4       	brcc	.+28     	; 0x254 <__vector_26+0x64>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	8e 0f       	add	r24, r30
 23c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	e7 5f       	subi	r30, 0xF7	; 247
 244:	fe 4f       	sbci	r31, 0xFE	; 254
 246:	80 81       	ld	r24, Z
 248:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 24c:	85 e8       	ldi	r24, 0x85	; 133
 24e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 252:	43 c0       	rjmp	.+134    	; 0x2da <__vector_26+0xea>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 254:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <TWI_statusReg>
 258:	81 60       	ori	r24, 0x01	; 1
 25a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 25e:	84 e9       	ldi	r24, 0x94	; 148
 260:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 264:	3a c0       	rjmp	.+116    	; 0x2da <__vector_26+0xea>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
 266:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	8e 0f       	add	r24, r30
 26e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 272:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	e7 5f       	subi	r30, 0xF7	; 247
 27a:	fe 4f       	sbci	r31, 0xFE	; 254
 27c:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 27e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TWI_msgSize>
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	28 17       	cp	r18, r24
 28e:	39 07       	cpc	r19, r25
 290:	24 f4       	brge	.+8      	; 0x29a <__vector_26+0xaa>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 292:	85 ec       	ldi	r24, 0xC5	; 197
 294:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 298:	20 c0       	rjmp	.+64     	; 0x2da <__vector_26+0xea>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 29a:	85 e8       	ldi	r24, 0x85	; 133
 29c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2a0:	1c c0       	rjmp	.+56     	; 0x2da <__vector_26+0xea>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
      TWI_buf[TWI_bufPtr] = TWDR;
 2a2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 2a6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	e7 5f       	subi	r30, 0xF7	; 247
 2ae:	fe 4f       	sbci	r31, 0xFE	; 254
 2b0:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 2b2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <TWI_statusReg>
 2b6:	81 60       	ori	r24, 0x01	; 1
 2b8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 2bc:	84 e9       	ldi	r24, 0x94	; 148
 2be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
 2c2:	0b c0       	rjmp	.+22     	; 0x2da <__vector_26+0xea>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 2c4:	85 ea       	ldi	r24, 0xA5	; 165
 2c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
 2ca:	07 c0       	rjmp	.+14     	; 0x2da <__vector_26+0xea>
    case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
//    case TWI_NO_STATE              // No relevant state information available; TWINT = 0
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 2cc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <TWI_state>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 2d4:	84 e0       	ldi	r24, 0x04	; 4
 2d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
 2da:	ff 91       	pop	r31
 2dc:	ef 91       	pop	r30
 2de:	bf 91       	pop	r27
 2e0:	af 91       	pop	r26
 2e2:	9f 91       	pop	r25
 2e4:	8f 91       	pop	r24
 2e6:	3f 91       	pop	r19
 2e8:	2f 91       	pop	r18
 2ea:	0f 90       	pop	r0
 2ec:	0b be       	out	0x3b, r0	; 59
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 2f8:	10 9a       	sbi	0x02, 0	; 2
    lcd_e_delay();
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <toggle_e+0x4>
    lcd_e_low();
 2fc:	10 98       	cbi	0x02, 0	; 2
 2fe:	08 95       	ret

00000300 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	d8 2f       	mov	r29, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 306:	66 23       	and	r22, r22
 308:	11 f0       	breq	.+4      	; 0x30e <lcd_write+0xe>
       lcd_rs_high();
 30a:	11 9a       	sbi	0x02, 1	; 2
 30c:	01 c0       	rjmp	.+2      	; 0x310 <lcd_write+0x10>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 30e:	11 98       	cbi	0x02, 1	; 2
    }
    lcd_rw_low();
 310:	12 98       	cbi	0x02, 2	; 2

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 312:	84 b1       	in	r24, 0x04	; 4
 314:	8f 60       	ori	r24, 0x0F	; 15
 316:	84 b9       	out	0x04, r24	; 4

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 318:	c5 b1       	in	r28, 0x05	; 5
 31a:	c0 7f       	andi	r28, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 31c:	8d 2f       	mov	r24, r29
 31e:	82 95       	swap	r24
 320:	8f 70       	andi	r24, 0x0F	; 15
 322:	8c 2b       	or	r24, r28
 324:	85 b9       	out	0x05, r24	; 5
        lcd_e_toggle();
 326:	e8 df       	rcall	.-48     	; 0x2f8 <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 328:	df 70       	andi	r29, 0x0F	; 15
 32a:	dc 2b       	or	r29, r28
        lcd_e_toggle();
 32c:	d5 b9       	out	0x05, r29	; 5
 32e:	e4 df       	rcall	.-56     	; 0x2f8 <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 330:	cf 60       	ori	r28, 0x0F	; 15
 332:	c5 b9       	out	0x05, r28	; 5
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 33a:	88 23       	and	r24, r24
 33c:	11 f0       	breq	.+4      	; 0x342 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 33e:	11 9a       	sbi	0x02, 1	; 2
 340:	01 c0       	rjmp	.+2      	; 0x344 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 342:	11 98       	cbi	0x02, 1	; 2
    lcd_rw_high();                           /* RW=1  read mode      */
 344:	12 9a       	sbi	0x02, 2	; 2
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 346:	84 b1       	in	r24, 0x04	; 4
 348:	80 7f       	andi	r24, 0xF0	; 240
 34a:	84 b9       	out	0x04, r24	; 4
        
        lcd_e_high();
 34c:	10 9a       	sbi	0x02, 0	; 2
        lcd_e_delay();        
 34e:	00 c0       	rjmp	.+0      	; 0x350 <lcd_read+0x16>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 350:	93 b1       	in	r25, 0x03	; 3
        lcd_e_low();
 352:	10 98       	cbi	0x02, 0	; 2
        
        lcd_e_delay();                       /* Enable 500ns low       */
 354:	00 c0       	rjmp	.+0      	; 0x356 <lcd_read+0x1c>
        
        lcd_e_high();
 356:	10 9a       	sbi	0x02, 0	; 2
        lcd_e_delay();
 358:	00 c0       	rjmp	.+0      	; 0x35a <lcd_read+0x20>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 35a:	23 b1       	in	r18, 0x03	; 3
 35c:	2f 70       	andi	r18, 0x0F	; 15
 35e:	89 2f       	mov	r24, r25
 360:	82 95       	swap	r24
 362:	80 7f       	andi	r24, 0xF0	; 240
        lcd_e_low();
 364:	10 98       	cbi	0x02, 0	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 366:	82 2b       	or	r24, r18
 368:	08 95       	ret

0000036a <lcd_waitbusy>:

{
    register uint8_t c;
    
    // wait until busy flag is cleared 
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	e6 df       	rcall	.-52     	; 0x33a <lcd_read>
 36e:	88 23       	and	r24, r24
 370:	e4 f3       	brlt	.-8      	; 0x36a <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 372:	84 e0       	ldi	r24, 0x04	; 4
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <lcd_waitbusy+0xc>
    
    // the address counter is updated 4us after the busy flag is cleared 
    delay(2);

    // now read the address counter 
    return (lcd_read(0));  // return address counter
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	de cf       	rjmp	.-68     	; 0x33a <lcd_read>
    
}/* lcd_waitbusy */
 37e:	08 95       	ret

00000380 <lcd_command>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/

void lcd_command(uint8_t cmd)
{
 380:	cf 93       	push	r28
 382:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 384:	f2 df       	rcall	.-28     	; 0x36a <lcd_waitbusy>
    lcd_write(cmd,0);
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	8c 2f       	mov	r24, r28
 38a:	ba df       	rcall	.-140    	; 0x300 <lcd_write>
}
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 390:	61 11       	cpse	r22, r1
 392:	03 c0       	rjmp	.+6      	; 0x39a <lcd_gotoxy+0xa>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 394:	80 58       	subi	r24, 0x80	; 128
 396:	f4 cf       	rjmp	.-24     	; 0x380 <lcd_command>
 398:	08 95       	ret
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 39a:	80 54       	subi	r24, 0x40	; 64
 39c:	f1 cf       	rjmp	.-30     	; 0x380 <lcd_command>
 39e:	08 95       	ret

000003a0 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	ee cf       	rjmp	.-36     	; 0x380 <lcd_command>
 3a4:	08 95       	ret

000003a6 <lcd_putc>:
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/

void lcd_putc(char c)
{
 3a6:	cf 93       	push	r28
 3a8:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 3aa:	df df       	rcall	.-66     	; 0x36a <lcd_waitbusy>
    if (c=='\n')
 3ac:	ca 30       	cpi	r28, 0x0A	; 10
 3ae:	41 f4       	brne	.+16     	; 0x3c0 <lcd_putc+0x1a>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 3b0:	80 34       	cpi	r24, 0x40	; 64
 3b2:	10 f0       	brcs	.+4      	; 0x3b8 <lcd_putc+0x12>
        addressCounter = LCD_START_LINE2;
    else
        addressCounter = LCD_START_LINE1;
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	01 c0       	rjmp	.+2      	; 0x3ba <lcd_putc+0x14>
#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
        addressCounter = LCD_START_LINE2;
 3b8:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 3ba:	80 58       	subi	r24, 0x80	; 128
 3bc:	e1 df       	rcall	.-62     	; 0x380 <lcd_command>
 3be:	03 c0       	rjmp	.+6      	; 0x3c6 <lcd_putc+0x20>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 3c0:	61 e0       	ldi	r22, 0x01	; 1
 3c2:	8c 2f       	mov	r24, r28
 3c4:	9d df       	rcall	.-198    	; 0x300 <lcd_write>
    }

}/* lcd_putc */
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 3ce:	ec 01       	movw	r28, r24
 3d0:	21 96       	adiw	r28, 0x01	; 1
 3d2:	fc 01       	movw	r30, r24
 3d4:	80 81       	ld	r24, Z
 3d6:	88 23       	and	r24, r24
 3d8:	21 f0       	breq	.+8      	; 0x3e2 <lcd_puts+0x18>
        lcd_putc(c);
 3da:	e5 df       	rcall	.-54     	; 0x3a6 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 3dc:	89 91       	ld	r24, Y+
 3de:	81 11       	cpse	r24, r1
 3e0:	fc cf       	rjmp	.-8      	; 0x3da <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	08 95       	ret

000003e8 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 3e8:	1f 93       	push	r17
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	18 2f       	mov	r17, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 3f0:	84 b1       	in	r24, 0x04	; 4
 3f2:	8f 60       	ori	r24, 0x0F	; 15
 3f4:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 3f6:	09 9a       	sbi	0x01, 1	; 1
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 3f8:	0a 9a       	sbi	0x01, 2	; 1
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 3fa:	08 9a       	sbi	0x01, 0	; 1
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	9d e7       	ldi	r25, 0x7D	; 125
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 404:	29 9a       	sbi	0x05, 1	; 5
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 406:	28 9a       	sbi	0x05, 0	; 5
    lcd_e_toggle();
 408:	77 df       	rcall	.-274    	; 0x2f8 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	97 e2       	ldi	r25, 0x27	; 39
 40e:	01 97       	sbiw	r24, 0x01	; 1
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 410:	f1 f7       	brne	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 412:	72 df       	rcall	.-284    	; 0x2f8 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 414:	c0 e8       	ldi	r28, 0x80	; 128
 416:	d0 e0       	ldi	r29, 0x00	; 0
 418:	ce 01       	movw	r24, r28
 41a:	01 97       	sbiw	r24, 0x01	; 1
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 41c:	f1 f7       	brne	.-4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41e:	6c df       	rcall	.-296    	; 0x2f8 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 420:	ce 01       	movw	r24, r28
 422:	01 97       	sbiw	r24, 0x01	; 1
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 424:	f1 f7       	brne	.-4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
    lcd_e_toggle();
 426:	28 98       	cbi	0x05, 0	; 5
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 428:	67 df       	rcall	.-306    	; 0x2f8 <toggle_e>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 42a:	21 97       	sbiw	r28, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 42e:	88 e2       	ldi	r24, 0x28	; 40
 430:	a7 df       	rcall	.-178    	; 0x380 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 432:	88 e0       	ldi	r24, 0x08	; 8
 434:	a5 df       	rcall	.-182    	; 0x380 <lcd_command>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 436:	b4 df       	rcall	.-152    	; 0x3a0 <lcd_clrscr>
 438:	86 e0       	ldi	r24, 0x06	; 6
 43a:	a2 df       	rcall	.-188    	; 0x380 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 43c:	81 2f       	mov	r24, r17
 43e:	a0 df       	rcall	.-192    	; 0x380 <lcd_command>
 440:	df 91       	pop	r29

}/* lcd_init */
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	08 95       	ret

00000448 <Switch_LED>:
//**************** Switch LED ************************************
//  Signalisation par clignotement de la LED  pendant 500 ms 
//****************************************************************
void Switch_LED(void)
{
	TOGGLE_IO(PIND,PIND7);
 448:	80 e8       	ldi	r24, 0x80	; 128
 44a:	89 b9       	out	0x09, r24	; 9
 44c:	08 95       	ret

0000044e <main>:

//****************** fonction principale *****************
int main (void)
{
 	//Initialisation hardware 
	Init_Hardware();
 44e:	9a de       	rcall	.-716    	; 0x184 <Init_Hardware>
	
	// Initialisation des Callbacks
	Callbacks_Init();
 450:	0f d0       	rcall	.+30     	; 0x470 <Callbacks_Init>
 452:	64 ef       	ldi	r22, 0xF4	; 244
 	IDCB_Led = Callbacks_Record_Timer(Switch_LED, 500);
 454:	71 e0       	ldi	r23, 0x01	; 1
 456:	84 e2       	ldi	r24, 0x24	; 36
 458:	92 e0       	ldi	r25, 0x02	; 2
 45a:	1a d0       	rcall	.+52     	; 0x490 <Callbacks_Record_Timer>
 45c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <IDCB_Led>
	//Callbacks_Record_Usart0_RX(USART0_RX);
	
	//Initilisation LCD
	lcd_init(LCD_DISP_ON); lcd_clrscr(); 
 460:	8c e0       	ldi	r24, 0x0C	; 12
 462:	c2 df       	rcall	.-124    	; 0x3e8 <lcd_init>
 464:	9d df       	rcall	.-198    	; 0x3a0 <lcd_clrscr>
	
	//Initialisation SPI  
	// Ne pas oublier de configurer le CS du MCP4921 dans Hardware.c !!
	SPI_MasterInit();
 466:	eb d1       	rcall	.+982    	; 0x83e <SPI_MasterInit>
 468:	6a d0       	rcall	.+212    	; 0x53e <OS_Start>
		
	// Lancement OS (Boucle infinie)
	OS_Start();
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	90 e0       	ldi	r25, 0x00	; 0
	//N'arrive jamais ici
	return 0; 
}
 46e:	08 95       	ret

00000470 <Callbacks_Init>:
 470:	e3 e1       	ldi	r30, 0x13	; 19
 472:	f1 e0       	ldi	r31, 0x01	; 1

// ****************  Retirer fonction de rappel USART0 **********************

void Callbacks_Remove_Usart0_RX(void)
{
	MaCBUSART0 = 0;
 474:	87 e2       	ldi	r24, 0x27	; 39
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	11 92       	st	Z+, r1
 47a:	11 92       	st	Z+, r1
 47c:	e8 17       	cp	r30, r24
 47e:	f9 07       	cpc	r31, r25
 480:	d9 f7       	brne	.-10     	; 0x478 <Callbacks_Init+0x8>
 482:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <MaCBUSART0+0x1>
 486:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <MaCBUSART0>
 48a:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <USART0_Reception>
 48e:	08 95       	ret

00000490 <Callbacks_Record_Timer>:
 490:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <My_CB+0x2>
 494:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <My_CB+0x3>
 498:	23 2b       	or	r18, r19
 49a:	71 f0       	breq	.+28     	; 0x4b8 <Callbacks_Record_Timer+0x28>
 49c:	e7 e1       	ldi	r30, 0x17	; 23
 49e:	f1 e0       	ldi	r31, 0x01	; 1
 4a0:	21 e0       	ldi	r18, 0x01	; 1
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	2f 5f       	subi	r18, 0xFF	; 255
 4a6:	3f 4f       	sbci	r19, 0xFF	; 255
 4a8:	41 91       	ld	r20, Z+
 4aa:	51 91       	ld	r21, Z+
 4ac:	45 2b       	or	r20, r21
 4ae:	d1 f7       	brne	.-12     	; 0x4a4 <Callbacks_Record_Timer+0x14>
 4b0:	2b 30       	cpi	r18, 0x0B	; 11
 4b2:	31 05       	cpc	r19, r1
 4b4:	18 f0       	brcs	.+6      	; 0x4bc <Callbacks_Record_Timer+0x2c>
 4b6:	16 c0       	rjmp	.+44     	; 0x4e4 <Callbacks_Record_Timer+0x54>
 4b8:	21 e0       	ldi	r18, 0x01	; 1
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	a9 01       	movw	r20, r18
 4be:	44 0f       	add	r20, r20
 4c0:	55 1f       	adc	r21, r21
 4c2:	fa 01       	movw	r30, r20
 4c4:	ed 5e       	subi	r30, 0xED	; 237
 4c6:	fe 4f       	sbci	r31, 0xFE	; 254
 4c8:	91 83       	std	Z+1, r25	; 0x01
 4ca:	80 83       	st	Z, r24
 4cc:	fa 01       	movw	r30, r20
 4ce:	e0 5d       	subi	r30, 0xD0	; 208
 4d0:	fe 4f       	sbci	r31, 0xFE	; 254
 4d2:	71 83       	std	Z+1, r23	; 0x01
 4d4:	60 83       	st	Z, r22
 4d6:	fa 01       	movw	r30, r20
 4d8:	ec 5b       	subi	r30, 0xBC	; 188
 4da:	fe 4f       	sbci	r31, 0xFE	; 254
 4dc:	11 82       	std	Z+1, r1	; 0x01
 4de:	10 82       	st	Z, r1
 4e0:	82 2f       	mov	r24, r18
 4e2:	08 95       	ret
 4e4:	8f ef       	ldi	r24, 0xFF	; 255
 4e6:	08 95       	ret

000004e8 <StateMachine>:
// CONTENU DES FONCTIONS INTERNES
unsigned char StateMachine(char state, unsigned char stimuli)
{
	unsigned char nextstate = state;    // Default stay in same state
	unsigned char i, j;
	for (i=0; ( j=pgm_read_byte(&menu_nextstate[i].state) ); i++ )
 4e8:	e8 e3       	ldi	r30, 0x38	; 56
 4ea:	f1 e0       	ldi	r31, 0x01	; 1
 4ec:	e4 91       	lpm	r30, Z
 4ee:	ee 23       	and	r30, r30
 4f0:	29 f1       	breq	.+74     	; 0x53c <StateMachine+0x54>
 4f2:	20 e0       	ldi	r18, 0x00	; 0
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	90 e0       	ldi	r25, 0x00	; 0
	{
		if ( j == state &&
 4f8:	8e 13       	cpse	r24, r30
 4fa:	13 c0       	rjmp	.+38     	; 0x522 <StateMachine+0x3a>
		pgm_read_byte(&menu_nextstate[i].input) == stimuli)
 4fc:	f9 01       	movw	r30, r18
 4fe:	ee 0f       	add	r30, r30
 500:	ff 1f       	adc	r31, r31
 502:	e2 0f       	add	r30, r18
 504:	f3 1f       	adc	r31, r19
 506:	e7 5c       	subi	r30, 0xC7	; 199
 508:	fe 4f       	sbci	r31, 0xFE	; 254
 50a:	e4 91       	lpm	r30, Z
{
	unsigned char nextstate = state;    // Default stay in same state
	unsigned char i, j;
	for (i=0; ( j=pgm_read_byte(&menu_nextstate[i].state) ); i++ )
	{
		if ( j == state &&
 50c:	e6 13       	cpse	r30, r22
 50e:	09 c0       	rjmp	.+18     	; 0x522 <StateMachine+0x3a>
		pgm_read_byte(&menu_nextstate[i].input) == stimuli)
		{
			// This is the one!
			nextstate = pgm_read_byte(&menu_nextstate[i].nextstate);
 510:	f9 01       	movw	r30, r18
 512:	ee 0f       	add	r30, r30
 514:	ff 1f       	adc	r31, r31
 516:	e2 0f       	add	r30, r18
 518:	f3 1f       	adc	r31, r19
 51a:	e6 5c       	subi	r30, 0xC6	; 198
 51c:	fe 4f       	sbci	r31, 0xFE	; 254
 51e:	84 91       	lpm	r24, Z
			break;
 520:	08 95       	ret
// CONTENU DES FONCTIONS INTERNES
unsigned char StateMachine(char state, unsigned char stimuli)
{
	unsigned char nextstate = state;    // Default stay in same state
	unsigned char i, j;
	for (i=0; ( j=pgm_read_byte(&menu_nextstate[i].state) ); i++ )
 522:	9f 5f       	subi	r25, 0xFF	; 255
 524:	29 2f       	mov	r18, r25
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	f9 01       	movw	r30, r18
 52a:	ee 0f       	add	r30, r30
 52c:	ff 1f       	adc	r31, r31
 52e:	e2 0f       	add	r30, r18
 530:	f3 1f       	adc	r31, r19
 532:	e8 5c       	subi	r30, 0xC8	; 200
 534:	fe 4f       	sbci	r31, 0xFE	; 254
 536:	e4 91       	lpm	r30, Z
 538:	e1 11       	cpse	r30, r1
 53a:	de cf       	rjmp	.-68     	; 0x4f8 <StateMachine+0x10>
			nextstate = pgm_read_byte(&menu_nextstate[i].nextstate);
			break;
		}
	}
	return nextstate;
}
 53c:	08 95       	ret

0000053e <OS_Start>:
// *******************************************************************
void OS_Start(void)
{
	unsigned char idx;
	//Création, configuration et démarrage de Timer0pour générer une interruption toutes les mS
 	TIMER0_Init_1ms(); //A partir d'ici, interruption toutes les ms par Timer0
 53e:	80 d1       	rcall	.+768    	; 0x840 <TIMER0_Init_1ms>
	// Configuration USART0 pour 9600 baud avec interruption en réception
	//USART0_Init_9600_INT_ON_RX();
	USART0_Init_115200_INT_ON_RX();
 540:	99 d1       	rcall	.+818    	; 0x874 <USART0_Init_115200_INT_ON_RX>
 542:	81 e0       	ldi	r24, 0x01	; 1
	char (*pStateFunc)(char); // pointeur d'une fonction
	unsigned char input = NONE;
	unsigned char i, j;
	
	// Initialisation des variables qui concernent la machine d'états
	state = ST_TXT_ADC_DAC;
 544:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
 548:	78 94       	sei
	nextstate = ST_TXT_ADC_DAC;
	statetext = Txt_ADC_DAC;
	pStateFunc = NULL;
	
 	sei();  
 54a:	c1 2c       	mov	r12, r1
	
	// Initialisation des variables qui concernent la machine d'états
	state = ST_TXT_ADC_DAC;
	nextstate = ST_TXT_ADC_DAC;
	statetext = Txt_ADC_DAC;
	pStateFunc = NULL;
 54c:	d1 2c       	mov	r13, r1
 54e:	0f 2e       	mov	r0, r31
	unsigned char i, j;
	
	// Initialisation des variables qui concernent la machine d'états
	state = ST_TXT_ADC_DAC;
	nextstate = ST_TXT_ADC_DAC;
	statetext = Txt_ADC_DAC;
 550:	fb e3       	ldi	r31, 0x3B	; 59
 552:	8f 2e       	mov	r8, r31
 554:	f1 e0       	ldi	r31, 0x01	; 1
 556:	9f 2e       	mov	r9, r31
 558:	f0 2d       	mov	r31, r0
 55a:	77 24       	eor	r7, r7
	unsigned char input = NONE;
	unsigned char i, j;
	
	// Initialisation des variables qui concernent la machine d'états
	state = ST_TXT_ADC_DAC;
	nextstate = ST_TXT_ADC_DAC;
 55c:	73 94       	inc	r7
 55e:	0f 2e       	mov	r0, r31
			 }
		 }
		 if (nextstate != state)  // il y a changement d'état
		 {
			 state = nextstate; // l'état est maintenant le nouveau état de la séquence définie dans main.h
			 for (i=0; (j=pgm_read_byte(&Menu_State[i].state)); i++)
 560:	fe e2       	ldi	r31, 0x2E	; 46
 562:	af 2e       	mov	r10, r31
 564:	f1 e0       	ldi	r31, 0x01	; 1
 566:	bf 2e       	mov	r11, r31
 568:	f0 2d       	mov	r31, r0
 56a:	51 2c       	mov	r5, r1
 56c:	61 2c       	mov	r6, r1
 56e:	06 c0       	rjmp	.+12     	; 0x57c <OS_Start+0x3e>
 570:	78 2e       	mov	r7, r24
 572:	85 2c       	mov	r8, r5
 574:	96 2c       	mov	r9, r6
 576:	02 c0       	rjmp	.+4      	; 0x57c <OS_Start+0x3e>
 578:	85 2c       	mov	r8, r5
 57a:	96 2c       	mov	r9, r6
 57c:	0f 2e       	mov	r0, r31
 57e:	f3 e1       	ldi	r31, 0x13	; 19
 580:	ef 2e       	mov	r14, r31
 582:	f1 e0       	ldi	r31, 0x01	; 1
 584:	ff 2e       	mov	r15, r31
 586:	f0 2d       	mov	r31, r0
 588:	00 e3       	ldi	r16, 0x30	; 48
 58a:	11 e0       	ldi	r17, 0x01	; 1
 58c:	c0 e0       	ldi	r28, 0x00	; 0
	unsigned char input = NONE;
	unsigned char i, j;
	
	// Initialisation des variables qui concernent la machine d'états
	state = ST_TXT_ADC_DAC;
	nextstate = ST_TXT_ADC_DAC;
 58e:	d0 e0       	ldi	r29, 0x00	; 0
 590:	ce 01       	movw	r24, r28
	 while(1)
 	 {
  		 // Check les conditions pour rappeler les fonctions liées au temps 
  		 for (idx = 0; idx < MAX_CALLBACKS; idx++)
    	 {
	 		if (My_CB[idx]) //Si on a l'adresse d'une fonction CB à cet index
 592:	d7 01       	movw	r26, r14
 594:	ed 91       	ld	r30, X+
 596:	fd 91       	ld	r31, X+
 598:	7d 01       	movw	r14, r26
 59a:	30 97       	sbiw	r30, 0x00	; 0
 59c:	b1 f0       	breq	.+44     	; 0x5ca <OS_Start+0x8c>
 59e:	de 01       	movw	r26, r28
     		//Si on est arrivé au nombre de mS demandé, on appelle la fonction 
			{	
     			if (Tick_CB[idx] >= Time_CB[idx])
 5a0:	aa 0f       	add	r26, r26
 5a2:	bb 1f       	adc	r27, r27
 5a4:	ac 5b       	subi	r26, 0xBC	; 188
 5a6:	be 4f       	sbci	r27, 0xFE	; 254
 5a8:	4d 91       	ld	r20, X+
 5aa:	5c 91       	ld	r21, X
 5ac:	d8 01       	movw	r26, r16
 5ae:	2d 91       	ld	r18, X+
 5b0:	3c 91       	ld	r19, X
 5b2:	42 17       	cp	r20, r18
 5b4:	53 07       	cpc	r21, r19
 5b6:	48 f0       	brcs	.+18     	; 0x5ca <OS_Start+0x8c>
 5b8:	88 0f       	add	r24, r24
      			{ 
	  				 Tick_CB[idx] = 0;
 5ba:	99 1f       	adc	r25, r25
 5bc:	dc 01       	movw	r26, r24
 5be:	ac 5b       	subi	r26, 0xBC	; 188
 5c0:	be 4f       	sbci	r27, 0xFE	; 254
 5c2:	11 96       	adiw	r26, 0x01	; 1
 5c4:	1c 92       	st	X, r1
 5c6:	1e 92       	st	-X, r1
 5c8:	09 95       	icall
      				 My_CB[idx]();  //Rappel de la fonction enregistrée!
 5ca:	21 96       	adiw	r28, 0x01	; 1
 5cc:	0e 5f       	subi	r16, 0xFE	; 254
 5ce:	1f 4f       	sbci	r17, 0xFF	; 255
 5d0:	ca 30       	cpi	r28, 0x0A	; 10
 	// BOUCLE INFINIE
	// Boucle principale de l'OS d'où on ne sort jamais
	 while(1)
 	 {
  		 // Check les conditions pour rappeler les fonctions liées au temps 
  		 for (idx = 0; idx < MAX_CALLBACKS; idx++)
 5d2:	d1 05       	cpc	r29, r1
 5d4:	e9 f6       	brne	.-70     	; 0x590 <OS_Start+0x52>
 5d6:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <USART0_Reception>
      				 My_CB[idx]();  //Rappel de la fonction enregistrée!
	 			}
			}
  		 }
		 // Check si réception Trame USART0
		 if (USART0_Reception)
 5da:	88 23       	and	r24, r24
 5dc:	59 f0       	breq	.+22     	; 0x5f4 <OS_Start+0xb6>
 5de:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <USART0_Reception>
		 {
		   USART0_Reception = FALSE;
 5e2:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <MaCBUSART0>
		   if (MaCBUSART0) MaCBUSART0(buf_USART0); //Rappel de la fonction enregistrée!
 5e6:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <MaCBUSART0+0x1>
 5ea:	30 97       	sbiw	r30, 0x00	; 0
 5ec:	19 f0       	breq	.+6      	; 0x5f4 <OS_Start+0xb6>
 5ee:	8b e2       	ldi	r24, 0x2B	; 43
 5f0:	91 e0       	ldi	r25, 0x01	; 1
 5f2:	09 95       	icall
 5f4:	81 14       	cp	r8, r1
		 }  
		 
		 // State Machine
		 if (statetext)
 5f6:	91 04       	cpc	r9, r1
 5f8:	59 f0       	breq	.+22     	; 0x610 <OS_Start+0xd2>
		 {
			 //Afficher_LCD(statetext);
			 cli();lcd_clrscr();lcd_gotoxy(0,0);lcd_puts(strcpy_P(Message_LCD, statetext));sei();
 5fa:	f8 94       	cli
 5fc:	d1 de       	rcall	.-606    	; 0x3a0 <lcd_clrscr>
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	c6 de       	rcall	.-628    	; 0x390 <lcd_gotoxy>
 604:	b4 01       	movw	r22, r8
 606:	89 e5       	ldi	r24, 0x59	; 89
 608:	91 e0       	ldi	r25, 0x01	; 1
 60a:	4f d1       	rcall	.+670    	; 0x8aa <strcpy_P>
 60c:	de de       	rcall	.-580    	; 0x3ca <lcd_puts>
 60e:	78 94       	sei
 610:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <Button>
			 //Usart_Tx_String(strcpy_P(Message_LCD, statetext));
			 statetext = NULL; // Pour ne pas écrire le même texte sur l'afficheur (évite la scintillation de l'écran)
		 }
		 		 
		 // Read buttons
		 input = Button;
 614:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <Button>
		 Button = NONE;
 618:	c1 14       	cp	r12, r1

		 // When in this state, we must call the state function
		 if (pStateFunc)
 61a:	d1 04       	cpc	r13, r1
 61c:	21 f0       	breq	.+8      	; 0x626 <OS_Start+0xe8>
 61e:	f6 01       	movw	r30, r12
		 {
			 nextstate = pStateFunc(input);
 620:	09 95       	icall
 622:	78 2e       	mov	r7, r24
 624:	07 c0       	rjmp	.+14     	; 0x634 <OS_Start+0xf6>
		 }
		 else
		 {
			 if (input != NONE)
 626:	88 23       	and	r24, r24
 628:	29 f0       	breq	.+10     	; 0x634 <OS_Start+0xf6>
			 {
				 nextstate = StateMachine(state, input);
 62a:	68 2f       	mov	r22, r24
 62c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <state>
 630:	5b df       	rcall	.-330    	; 0x4e8 <StateMachine>
 632:	78 2e       	mov	r7, r24
 634:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <state>
			 }
		 }
		 if (nextstate != state)  // il y a changement d'état
 638:	78 16       	cp	r7, r24
 63a:	09 f4       	brne	.+2      	; 0x63e <OS_Start+0x100>
 63c:	99 cf       	rjmp	.-206    	; 0x570 <OS_Start+0x32>
 63e:	70 92 2a 01 	sts	0x012A, r7	; 0x80012a <state>
		 {
			 state = nextstate; // l'état est maintenant le nouveau état de la séquence définie dans main.h
 642:	f5 01       	movw	r30, r10
			 for (i=0; (j=pgm_read_byte(&Menu_State[i].state)); i++)
 644:	84 91       	lpm	r24, Z
 646:	88 23       	and	r24, r24
 648:	09 f4       	brne	.+2      	; 0x64c <OS_Start+0x10e>
 64a:	96 cf       	rjmp	.-212    	; 0x578 <OS_Start+0x3a>
 64c:	78 16       	cp	r7, r24
			 {
				 if (j == state)
 64e:	29 f0       	breq	.+10     	; 0x65a <OS_Start+0x11c>
 650:	20 e0       	ldi	r18, 0x00	; 0
 652:	17 c0       	rjmp	.+46     	; 0x682 <OS_Start+0x144>
 654:	7e 12       	cpse	r7, r30
 656:	15 c0       	rjmp	.+42     	; 0x682 <OS_Start+0x144>
 658:	02 c0       	rjmp	.+4      	; 0x65e <OS_Start+0x120>
 65a:	85 2d       	mov	r24, r5
			 }
		 }
		 if (nextstate != state)  // il y a changement d'état
		 {
			 state = nextstate; // l'état est maintenant le nouveau état de la séquence définie dans main.h
			 for (i=0; (j=pgm_read_byte(&Menu_State[i].state)); i++)
 65c:	96 2d       	mov	r25, r6
 65e:	fc 01       	movw	r30, r24
			 {
				 if (j == state)
				 {
					 statetext =  (PGM_P) pgm_read_word(&Menu_State[i].pText);
 660:	ee 0f       	add	r30, r30
 662:	ff 1f       	adc	r31, r31
 664:	ee 0f       	add	r30, r30
 666:	ff 1f       	adc	r31, r31
 668:	8e 0f       	add	r24, r30
 66a:	9f 1f       	adc	r25, r31
 66c:	fc 01       	movw	r30, r24
 66e:	e1 5d       	subi	r30, 0xD1	; 209
 670:	fe 4f       	sbci	r31, 0xFE	; 254
 672:	85 90       	lpm	r8, Z+
 674:	94 90       	lpm	r9, Z
 676:	8f 5c       	subi	r24, 0xCF	; 207
					 pStateFunc = (PGM_VOID_P) pgm_read_word(&Menu_State[i].pFunc);
 678:	9e 4f       	sbci	r25, 0xFE	; 254
 67a:	fc 01       	movw	r30, r24
 67c:	c5 90       	lpm	r12, Z+
 67e:	d4 90       	lpm	r13, Z
 680:	7d cf       	rjmp	.-262    	; 0x57c <OS_Start+0x3e>
					 break;
 682:	2f 5f       	subi	r18, 0xFF	; 255
			 }
		 }
		 if (nextstate != state)  // il y a changement d'état
		 {
			 state = nextstate; // l'état est maintenant le nouveau état de la séquence définie dans main.h
			 for (i=0; (j=pgm_read_byte(&Menu_State[i].state)); i++)
 684:	82 2f       	mov	r24, r18
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	fc 01       	movw	r30, r24
 68a:	ee 0f       	add	r30, r30
 68c:	ff 1f       	adc	r31, r31
 68e:	ee 0f       	add	r30, r30
 690:	ff 1f       	adc	r31, r31
 692:	e8 0f       	add	r30, r24
 694:	f9 1f       	adc	r31, r25
 696:	e2 5d       	subi	r30, 0xD2	; 210
 698:	fe 4f       	sbci	r31, 0xFE	; 254
 69a:	e4 91       	lpm	r30, Z
 69c:	e1 11       	cpse	r30, r1
 69e:	da cf       	rjmp	.-76     	; 0x654 <OS_Start+0x116>
 6a0:	85 2c       	mov	r8, r5
 6a2:	96 2c       	mov	r9, r6
 6a4:	6b cf       	rjmp	.-298    	; 0x57c <OS_Start+0x3e>

000006a6 <__vector_18>:
 6a6:	1f 92       	push	r1

// ******************
// INTERRUPTION TIMER
// ******************
ISR(TIMER0_OVF_vect)
{
 6a8:	0f 92       	push	r0
 6aa:	0f b6       	in	r0, 0x3f	; 63
 6ac:	0f 92       	push	r0
 6ae:	11 24       	eor	r1, r1
 6b0:	0b b6       	in	r0, 0x3b	; 59
 6b2:	0f 92       	push	r0
 6b4:	2f 93       	push	r18
 6b6:	3f 93       	push	r19
 6b8:	8f 93       	push	r24
 6ba:	9f 93       	push	r25
 6bc:	ef 93       	push	r30
 6be:	ff 93       	push	r31
	TCNT0 = 131;  // reconfiguration du Timer1
 6c0:	83 e8       	ldi	r24, 0x83	; 131
 6c2:	86 bd       	out	0x26, r24	; 38
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	90 e0       	ldi	r25, 0x00	; 0
	// Ajourner tous les TICKS
	unsigned char Int_Counter;
  	for (Int_Counter = 0; Int_Counter < MAX_CALLBACKS; Int_Counter++)
	{
		Tick_CB[Int_Counter]++;
 6c8:	fc 01       	movw	r30, r24
 6ca:	ee 0f       	add	r30, r30
 6cc:	ff 1f       	adc	r31, r31
 6ce:	ec 5b       	subi	r30, 0xBC	; 188
 6d0:	fe 4f       	sbci	r31, 0xFE	; 254
 6d2:	20 81       	ld	r18, Z
 6d4:	31 81       	ldd	r19, Z+1	; 0x01
 6d6:	2f 5f       	subi	r18, 0xFF	; 255
 6d8:	3f 4f       	sbci	r19, 0xFF	; 255
 6da:	31 83       	std	Z+1, r19	; 0x01
 6dc:	20 83       	st	Z, r18
 6de:	01 96       	adiw	r24, 0x01	; 1
ISR(TIMER0_OVF_vect)
{
	TCNT0 = 131;  // reconfiguration du Timer1
	// Ajourner tous les TICKS
	unsigned char Int_Counter;
  	for (Int_Counter = 0; Int_Counter < MAX_CALLBACKS; Int_Counter++)
 6e0:	8a 30       	cpi	r24, 0x0A	; 10
 6e2:	91 05       	cpc	r25, r1
 6e4:	89 f7       	brne	.-30     	; 0x6c8 <__vector_18+0x22>
	{
		Tick_CB[Int_Counter]++;
	}
}
 6e6:	ff 91       	pop	r31
 6e8:	ef 91       	pop	r30
 6ea:	9f 91       	pop	r25
 6ec:	8f 91       	pop	r24
 6ee:	3f 91       	pop	r19
 6f0:	2f 91       	pop	r18
 6f2:	0f 90       	pop	r0
 6f4:	0b be       	out	0x3b, r0	; 59
 6f6:	0f 90       	pop	r0
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	0f 90       	pop	r0
 6fc:	1f 90       	pop	r1
 6fe:	18 95       	reti

00000700 <__vector_1>:

// ******************
// INTERRUPTION INT0
// ******************
ISR(INT0_vect)
{	
 700:	1f 92       	push	r1
 702:	0f 92       	push	r0
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	0f 92       	push	r0
 708:	11 24       	eor	r1, r1
 70a:	8f 93       	push	r24
	Door_Open = TRUE;
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Door_Open>
	// FOR DEBUG
	//Usart0_Tx('B');
}
 712:	8f 91       	pop	r24
 714:	0f 90       	pop	r0
 716:	0f be       	out	0x3f, r0	; 63
 718:	0f 90       	pop	r0
 71a:	1f 90       	pop	r1
 71c:	18 95       	reti

0000071e <__vector_20>:

// ***************************************
// INTERRUPTION USART0 en RX (TERMINAL PC)
// ***************************************
ISR(USART0_RX_vect)
{
 71e:	1f 92       	push	r1
 720:	0f 92       	push	r0
 722:	0f b6       	in	r0, 0x3f	; 63
 724:	0f 92       	push	r0
 726:	11 24       	eor	r1, r1
 728:	0b b6       	in	r0, 0x3b	; 59
 72a:	0f 92       	push	r0
 72c:	2f 93       	push	r18
 72e:	3f 93       	push	r19
 730:	4f 93       	push	r20
 732:	5f 93       	push	r21
 734:	6f 93       	push	r22
 736:	7f 93       	push	r23
 738:	8f 93       	push	r24
 73a:	9f 93       	push	r25
 73c:	af 93       	push	r26
 73e:	bf 93       	push	r27
 740:	ef 93       	push	r30
 742:	ff 93       	push	r31
	buf_USART0[idxbuf_USART0] = UDR0;		 //Lire le registre de réception, le charger dans le buffer
 744:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <idxbuf_USART0>
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 74e:	e5 5d       	subi	r30, 0xD5	; 213
 750:	fe 4f       	sbci	r31, 0xFE	; 254
 752:	80 83       	st	Z, r24
	if (buf_USART0[idxbuf_USART0]=='@') 
 754:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <idxbuf_USART0>
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	e5 5d       	subi	r30, 0xD5	; 213
 75c:	fe 4f       	sbci	r31, 0xFE	; 254
 75e:	80 81       	ld	r24, Z
 760:	80 34       	cpi	r24, 0x40	; 64
 762:	e1 f4       	brne	.+56     	; 0x79c <__vector_20+0x7e>
	{
		Usart0_Tx(buf_USART0[idxbuf_USART0]);//Transmettre le caractère en retour 
 764:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <idxbuf_USART0>
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	e5 5d       	subi	r30, 0xD5	; 213
 76c:	fe 4f       	sbci	r31, 0xFE	; 254
 76e:	80 81       	ld	r24, Z
 770:	79 d0       	rcall	.+242    	; 0x864 <Usart0_Tx>
		buf_USART0[++idxbuf_USART0] = 0;	// Caractère 'NULL' de fin de chaîne 
 772:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <idxbuf_USART0>
 776:	ef 5f       	subi	r30, 0xFF	; 255
 778:	e0 93 05 01 	sts	0x0105, r30	; 0x800105 <idxbuf_USART0>
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	e5 5d       	subi	r30, 0xD5	; 213
 780:	fe 4f       	sbci	r31, 0xFE	; 254
 782:	10 82       	st	Z, r1
		USART0_Reception = TRUE;
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <USART0_Reception>
		idxbuf_USART0 = 0;
 78a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <idxbuf_USART0>
		//Transmettre retour chariot ('\r' + '\n')
		Usart0_Tx('\r');
 78e:	8d e0       	ldi	r24, 0x0D	; 13
 790:	69 d0       	rcall	.+210    	; 0x864 <Usart0_Tx>
		Usart0_Tx('\n');
 792:	8a e0       	ldi	r24, 0x0A	; 10
 794:	67 d0       	rcall	.+206    	; 0x864 <Usart0_Tx>
		Usart0_Tx('>');  // Transmettre un prompt
 796:	8e e3       	ldi	r24, 0x3E	; 62
 798:	65 d0       	rcall	.+202    	; 0x864 <Usart0_Tx>
 79a:	10 c0       	rjmp	.+32     	; 0x7bc <__vector_20+0x9e>
 79c:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <idxbuf_USART0>
	}
	else
	{
		//Transmettre le caractère en retour 
		Usart0_Tx(buf_USART0[idxbuf_USART0]);
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	e5 5d       	subi	r30, 0xD5	; 213
 7a4:	fe 4f       	sbci	r31, 0xFE	; 254
 7a6:	80 81       	ld	r24, Z
 7a8:	5d d0       	rcall	.+186    	; 0x864 <Usart0_Tx>
 7aa:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <idxbuf_USART0>
		//Si on arrive au maximum du buffer, remettre à zéro
		if (++idxbuf_USART0 >= MAXBUFUSART0) idxbuf_USART0 = 0;
 7ae:	8f 5f       	subi	r24, 0xFF	; 255
 7b0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <idxbuf_USART0>
 7b4:	84 30       	cpi	r24, 0x04	; 4
 7b6:	10 f0       	brcs	.+4      	; 0x7bc <__vector_20+0x9e>
 7b8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <idxbuf_USART0>
 7bc:	ff 91       	pop	r31
	}
}
 7be:	ef 91       	pop	r30
 7c0:	bf 91       	pop	r27
 7c2:	af 91       	pop	r26
 7c4:	9f 91       	pop	r25
 7c6:	8f 91       	pop	r24
 7c8:	7f 91       	pop	r23
 7ca:	6f 91       	pop	r22
 7cc:	5f 91       	pop	r21
 7ce:	4f 91       	pop	r20
 7d0:	3f 91       	pop	r19
 7d2:	2f 91       	pop	r18
 7d4:	0f 90       	pop	r0
 7d6:	0b be       	out	0x3b, r0	; 59
 7d8:	0f 90       	pop	r0
 7da:	0f be       	out	0x3f, r0	; 63
 7dc:	0f 90       	pop	r0
 7de:	1f 90       	pop	r1
 7e0:	18 95       	reti

000007e2 <__vector_6>:
 7e2:	1f 92       	push	r1

//Interruption Touches
ISR(PCINT2_vect)
{
 7e4:	0f 92       	push	r0
 7e6:	0f b6       	in	r0, 0x3f	; 63
 7e8:	0f 92       	push	r0
 7ea:	11 24       	eor	r1, r1
 7ec:	8f 93       	push	r24
	// tester	PINC
	char comp_PINC = ~PINC;
 7ee:	86 b1       	in	r24, 0x06	; 6
 7f0:	80 95       	com	r24
	//push test
	if (comp_PINC & (1<<PINC1))
 7f2:	81 ff       	sbrs	r24, 1
 7f4:	04 c0       	rjmp	.+8      	; 0x7fe <__vector_6+0x1c>
	Button = UP;
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <Button>
 7fc:	1a c0       	rjmp	.+52     	; 0x832 <__vector_6+0x50>
	else if (comp_PINC & (1<<PINC2))
 7fe:	82 ff       	sbrs	r24, 2
 800:	04 c0       	rjmp	.+8      	; 0x80a <__vector_6+0x28>
	Button = RIGHT;
 802:	85 e0       	ldi	r24, 0x05	; 5
 804:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <Button>
 808:	14 c0       	rjmp	.+40     	; 0x832 <__vector_6+0x50>
	else if (comp_PINC & (1<<PINC3))
 80a:	83 ff       	sbrs	r24, 3
 80c:	04 c0       	rjmp	.+8      	; 0x816 <__vector_6+0x34>
	Button = ENTER;
 80e:	84 e0       	ldi	r24, 0x04	; 4
 810:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <Button>
 814:	0e c0       	rjmp	.+28     	; 0x832 <__vector_6+0x50>
	else if (comp_PINC & (1<<PINC4))
 816:	84 ff       	sbrs	r24, 4
 818:	04 c0       	rjmp	.+8      	; 0x822 <__vector_6+0x40>
	Button = DOWN;
 81a:	82 e0       	ldi	r24, 0x02	; 2
 81c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <Button>
 820:	08 c0       	rjmp	.+16     	; 0x832 <__vector_6+0x50>
	else if (comp_PINC & (1<<PINC5))
 822:	85 ff       	sbrs	r24, 5
 824:	04 c0       	rjmp	.+8      	; 0x82e <__vector_6+0x4c>
	Button = LEFT;
 826:	83 e0       	ldi	r24, 0x03	; 3
 828:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <Button>
 82c:	02 c0       	rjmp	.+4      	; 0x832 <__vector_6+0x50>
	else
	Button = NONE;
 82e:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <Button>
}
 832:	8f 91       	pop	r24
 834:	0f 90       	pop	r0
 836:	0f be       	out	0x3f, r0	; 63
 838:	0f 90       	pop	r0
 83a:	1f 90       	pop	r1
 83c:	18 95       	reti

0000083e <SPI_MasterInit>:
#include "main.h"
#include "SPI.h"


void SPI_MasterInit(void)
{
 83e:	08 95       	ret

00000840 <TIMER0_Init_1ms>:
		// fréquence horloge = 8000000 hz
		// Utilisation du TIMER 0, comptage sur 8 bits
		// Si diviseur par 64 --> 8000000/64 = 125 Khz
		// Une période = 8µS
		// Si je compte jusque 125 --> 125 X 8 = 1 ms
		TCCR0A = 0x00;
 840:	14 bc       	out	0x24, r1	; 36
		//TCCR0B |= (0<<CS02)|(1<<CS01)|(1<<CS00);
		CLR_BIT(TCCR0B,CS02);
 842:	85 b5       	in	r24, 0x25	; 37
 844:	8b 7f       	andi	r24, 0xFB	; 251
 846:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TCCR0B,CS01);
 848:	85 b5       	in	r24, 0x25	; 37
 84a:	82 60       	ori	r24, 0x02	; 2
 84c:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TCCR0B,CS00);
 84e:	85 b5       	in	r24, 0x25	; 37
 850:	81 60       	ori	r24, 0x01	; 1
 852:	85 bd       	out	0x25, r24	; 37
		// Valeur initiale du compteur = 256 - 125 = 131
		TCNT0 = 131;
 854:	83 e8       	ldi	r24, 0x83	; 131
 856:	86 bd       	out	0x26, r24	; 38
		// Autorisation de l'interruption en cas d'overflow
		//TIMSK0 = (1<<TOIE0);
		SET_BIT(TIMSK0,TOIE0);
 858:	ee e6       	ldi	r30, 0x6E	; 110
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	80 81       	ld	r24, Z
 85e:	81 60       	ori	r24, 0x01	; 1
 860:	80 83       	st	Z, r24
 862:	08 95       	ret

00000864 <Usart0_Tx>:
	// Configuration Emission + Réception, Interruptions en RX 
	//(UCSR0B) RXCIE0 = 1 | TXCIE0 =0 | UDRIE0 = 0 | RXEN0 = 1 | TXEN0 = 1 | UCSZ02 = 0 | RXB80 = 0 | TXB80 = 0
	UCSR0B = 0b10011000;
	// Async. mode, 8 bits, 1 bit de stop, pas de contrôle de parité
	//(UCSR0C) UMSEL01 = 0 | UMSEL00 = 0 | UPM01 = 0 | UPM00 = 0 | USBS0 = 0 | UCSZ01 = 1 | UCSZ00 = 1 | UCPOL0 = 0;
	UCSR0C = 0b00000110;
 864:	e0 ec       	ldi	r30, 0xC0	; 192
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	90 81       	ld	r25, Z
 86a:	95 ff       	sbrs	r25, 5
 86c:	fd cf       	rjmp	.-6      	; 0x868 <Usart0_Tx+0x4>
 86e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 872:	08 95       	ret

00000874 <USART0_Init_115200_INT_ON_RX>:
	
	#if defined (_1MHZ)
	#elif defined (_8MHZ)
		// fréquence horloge = 8000000 hz, Si Baudrate = 115200 alors UBRR = 8
		//1xspeed  U2X0 = 1
		UCSR0A |= (1<<U2X0);
 874:	e0 ec       	ldi	r30, 0xC0	; 192
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	80 81       	ld	r24, Z
 87a:	82 60       	ori	r24, 0x02	; 2
 87c:	80 83       	st	Z, r24
		// 115200 baud
		UBRR0 = 8;
 87e:	88 e0       	ldi	r24, 0x08	; 8
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 886:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		// Configuration Emission + Réception, Interruptions en RX
		//(UCSR0B) RXCIE0 = 1 | TXCIE0 =0 | UDRIE0 = 0 | RXEN0 = 1 | TXEN0 = 1 | UCSZ02 = 0 | RXB80 = 0 | TXB80 = 0
		UCSR0B = 0b10011000;
 88a:	88 e9       	ldi	r24, 0x98	; 152
 88c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
		// Async. mode, 8 bits, 1 bit de stop, pas de contrôle de parité
		//(UCSR0C) UMSEL01 = 0 | UMSEL00 = 0 | UPM01 = 0 | UPM00 = 0 | USBS0 = 0 | UCSZ01 = 1 | UCSZ00 = 1 | UCPOL0 = 0;
		UCSR0C = 0b00000110;
 890:	86 e0       	ldi	r24, 0x06	; 6
 892:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 896:	08 95       	ret

00000898 <__tablejump2__>:
 898:	ee 0f       	add	r30, r30
 89a:	ff 1f       	adc	r31, r31
 89c:	00 24       	eor	r0, r0
 89e:	00 1c       	adc	r0, r0
 8a0:	0b be       	out	0x3b, r0	; 59
 8a2:	07 90       	elpm	r0, Z+
 8a4:	f6 91       	elpm	r31, Z
 8a6:	e0 2d       	mov	r30, r0
 8a8:	09 94       	ijmp

000008aa <strcpy_P>:
 8aa:	fb 01       	movw	r30, r22
 8ac:	dc 01       	movw	r26, r24
 8ae:	05 90       	lpm	r0, Z+
 8b0:	0d 92       	st	X+, r0
 8b2:	00 20       	and	r0, r0
 8b4:	e1 f7       	brne	.-8      	; 0x8ae <strcpy_P+0x4>
 8b6:	08 95       	ret

000008b8 <_exit>:
 8b8:	f8 94       	cli

000008ba <__stop_program>:
 8ba:	ff cf       	rjmp	.-2      	; 0x8ba <__stop_program>
